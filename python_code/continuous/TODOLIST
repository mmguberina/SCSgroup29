in rough order of importance

yeah i'm leaving this as this is all TBD
at some later point 

##################################################
# optimisation necessary for scale (and sense)
##################################################
1. checking for collisions can be done much more efficiently:
check https://www.youtube.com/watch?v=eED4bSkYCB8 for reference
2. add networking in the picture to automatically gather data on one
computer
---> use sockets, have a "master" program which only gets the data and writes
when needed


##############################################
# fields things
##############################################

DONE WITH THIS WHATEVER IT IS


1. do the the artificial field plots which clearly show how they work
	--> 1 robot, 2 obstacles type of plot for that purpose
	--> of course there will be (at least) one big and sexy animation
		of it in action for a whole simulation (at the very least because
		it's so damn pretty)

========> yeah just change the params bruh this is done already

2. figure out what to change to make the work as indended (99% sure
it's just down to signs, everything is defined with robot-something radii-vectors,
just make sure that the radial fields have the appropriate directions and
that the strength are reasonable)

=========> yeah it looks reasonable, and the ratio of the forces is key.
			the whole point of testing is to find those parameters

============> it is essential to split the force and torque coefficients tho!
---> but enforce some minimum for robots as they should not collide

3. come up with cheap hack which limits total field stregth when 2 obstackles 
overlap:
	3.1. draw picture, do geometry, do few sample calcs and call it day if it 
		 it checks out 
	3.2. find out how to efficiently indentify overlapping obstacles
		---> since they don't move you need to do that before you even run the sim,
			 it's all gucci if you don't need to recalculate that all the time.
			 in other words, calc that in the environments object generating function.
			 thus this is just down to having the objects not (just) as a set (or whatever),
			 but also as a dictionary where values are the overlapping neighbours
	3.3. pretend they won't form a closed loops haha 
-------> found a reasonable hack i won't question. 
-------> yeah it didn't exactly work and i am mentally unable to fuck with this any longer
-------> it sorta worked and the torques part is what it absolutely necessary to get this thing to work
=======> yeah i didn't manage to fix it, we're rolling just with run of the mill (wrong) repulsive force


##############################################
# testing  prep
##############################################
# DONE WITH THIS

4. (finally) code the sample environments (jeez)
------> yeah i'm not fucking doing that. let them be sparse,
normal and cluttered because i have that already.
if someone else feels like doing that be my guest.

5. eyeball parameters with which to do the testing.
the absolute minimum here is changing the number of robots
and the force coefficients. possibly do a linear version and a square version
separately -- the silicon doesn't have feelings, it's ok to burn it with your folly.
thank god this down to literally 3 ascii charcters
-----> forces are settled and there is just the 3 mentioned types of environment * 3 sizes

6. make all robots go back to base after some number of timesteps.
wait for the same amount of timesteps for them to return.
and yes this is yet another parameter that should be an independent variable.
(some configurations will be finished sooner that others).
--------> no i won't, that' robotics and not complex systems speaking (and i am desperate) 

7. forbid robots from leaving the grid. if they don't get stuck at the limits
i really don't give a shit how it's implemented at this point.
-----> just change their velocity to be toward the delivery station

8. FIX WHICH STATES USE WHICH FORCES
-----> all of them because there are just 2 forces 


##############################################
# testing  
##############################################

4. collect all data produced by the sim (it's prolly all there already,
but put it a nice pandas data frame) and write it to a file.
but i mean all of it. the goal is to be able to do not need to
run sims again if you thought of a new plot.
--> pandas for timesteped stuff, else in a text file
which is like a csv enhanced to a dictionary esentially

5. write parameters of simulations to be run in a huge ass list of tuples.
pls try to do it with enums or something as the probability of fucking up
there is almost 100%

6. write the multiprocessing code.
if you did 5 correctly, the distribution problem will be
reduced to selecting the right array slice (i.e. it won't exist)
----> copy old mp code



##############################################
# data analysis
##############################################

the metrics are
a) number of items collected - already a returned
#####b) number of robots successfully returned to base - near trivial implementation 
#####---> after some timestep just put all of them in state return_to_base.
######conveniently, they drop items from that state already
-----------> haha no
c) percentage of covered area (without the obstacles obviously) - infer this from data 
####d) n of times the robots collided with other robots and/or obstacles - infer this from data,
######i don't feel like coding it up rn. or just skip this metric for now (let's be real here).
-----------> haha no

find ways to plot this so that the graphs are fun
-----> do that as a group and just generate the data for now
---------> do fuckin histogram comparisons
